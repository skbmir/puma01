#pragma once

#include <puma01_usbcan/vs_can_api.h>

namespace puma01_usbcan
{

class VSCAN_serial_handler
{

public:

    VSCAN_MSG read_buffer; //????????????????????????????????????????????????????????
    VSCAN_MSG write_buffer; //????????????????????????????????????????????????????????

    VSCAN_serial_handler(); 
    ~VSCAN_serial_handler();

    bool open(CHAR *device = "/dev/ttyUSB0", DWORD mode = VSCAN_MODE_NORMAL, void * speed = VSCAN_SPEED_1M);
    void close();

    void setSpeed(void * speed);

    bool isReady();

    char * getStatusString();
    
    bool readRequest();
    bool writeRequest();
    bool Flush();

    bool pushFrametoBuffer(UINT32 Id, UINT8 Size, UINT8 * Data, UINT8 Flags=VSCAN_FLAGS_STANDARD); //????????????????????????????????????????????????????????

// ???
    VSCAN_STATUS getStatus();
    DWORD getMode(); 
    VSCAN_HANDLE getHandle();

    VSCAN_STATUS enableTimeStamp();
    VSCAN_STATUS disableTimeStamp();
    VSCAN_STATUS enableReadBlockingMode();
    VSCAN_STATUS disableReadBlockingMode();
// ???

private:
    VSCAN_HANDLE vscan_handle_=-1; //addres of serial port, or actual status code
    VSCAN_STATUS vscan_status_=-1; //actual status code, use getStatusString() to print it in human-readable form

    CHAR error_string_[33]; //???????????????????????????????????????????????????????? 

    DWORD actual_read_frame_number_; //actual number of read CAN-fames
    DWORD actual_write_frame_number_; //actual number of written CAN-fames

}; //class

} //namespace



/* 

TO-DO:
- check array issues
- private members??

*/